{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of round 2 of Q_learning.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "BRVUBhvY2aEb",
        "colab_type": "code",
        "outputId": "790a2753-2cc6-45b1-a93f-528e0006b00b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 885
        }
      },
      "source": [
        "!pip install gym-2048"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting gym-2048\n",
            "  Downloading https://files.pythonhosted.org/packages/47/47/a1f06f3a6a05b78ffee842a7cd6f6734f97b0c3600f69df7654c232f0adc/gym-2048-0.2.6.tar.gz\n",
            "Collecting gym~=0.10.0\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/87/04/70d4901b7105082c9742acd64728342f6da7cd471572fd0660a73f9cfe27/gym-0.10.11.tar.gz (1.5MB)\n",
            "\u001b[K     |████████████████████████████████| 1.5MB 2.7MB/s \n",
            "\u001b[?25hCollecting numpy~=1.14.0\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/e5/c4/395ebb218053ba44d64935b3729bc88241ec279915e72100c5979db10945/numpy-1.14.6-cp36-cp36m-manylinux1_x86_64.whl (13.8MB)\n",
            "\u001b[K     |████████████████████████████████| 13.8MB 41.1MB/s \n",
            "\u001b[?25hRequirement already satisfied: scipy in /usr/local/lib/python3.6/dist-packages (from gym~=0.10.0->gym-2048) (1.3.3)\n",
            "Requirement already satisfied: requests>=2.0 in /usr/local/lib/python3.6/dist-packages (from gym~=0.10.0->gym-2048) (2.21.0)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from gym~=0.10.0->gym-2048) (1.12.0)\n",
            "Requirement already satisfied: pyglet>=1.2.0 in /usr/local/lib/python3.6/dist-packages (from gym~=0.10.0->gym-2048) (1.3.2)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests>=2.0->gym~=0.10.0->gym-2048) (2019.9.11)\n",
            "Requirement already satisfied: idna<2.9,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests>=2.0->gym~=0.10.0->gym-2048) (2.8)\n",
            "Requirement already satisfied: urllib3<1.25,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests>=2.0->gym~=0.10.0->gym-2048) (1.24.3)\n",
            "Requirement already satisfied: chardet<3.1.0,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests>=2.0->gym~=0.10.0->gym-2048) (3.0.4)\n",
            "Requirement already satisfied: future in /usr/local/lib/python3.6/dist-packages (from pyglet>=1.2.0->gym~=0.10.0->gym-2048) (0.16.0)\n",
            "Building wheels for collected packages: gym-2048, gym\n",
            "  Building wheel for gym-2048 (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for gym-2048: filename=gym_2048-0.2.6-cp36-none-any.whl size=4682 sha256=0a3ad634a8a34d3f77cdd721119a8777b65c9e80859469414a78e4c05673f9a6\n",
            "  Stored in directory: /root/.cache/pip/wheels/ab/11/22/a6c0fb3622f6fad7e8b7f4342a3c64e115bee08a4189bbae18\n",
            "  Building wheel for gym (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for gym: filename=gym-0.10.11-cp36-none-any.whl size=1588314 sha256=cdf6d061a9d0e9bebc5ce624bd6b2465d36fa83bf737fc6833640b0bf1a4bf7d\n",
            "  Stored in directory: /root/.cache/pip/wheels/7b/eb/1f/22c4124f3c64943aa0646daf4612b1c1f00f27d89b81304ebd\n",
            "Successfully built gym-2048 gym\n",
            "\u001b[31mERROR: tensorflow 1.15.0 has requirement numpy<2.0,>=1.16.0, but you'll have numpy 1.14.6 which is incompatible.\u001b[0m\n",
            "\u001b[31mERROR: spacy 2.1.9 has requirement numpy>=1.15.0, but you'll have numpy 1.14.6 which is incompatible.\u001b[0m\n",
            "\u001b[31mERROR: imgaug 0.2.9 has requirement numpy>=1.15.0, but you'll have numpy 1.14.6 which is incompatible.\u001b[0m\n",
            "\u001b[31mERROR: fastai 1.0.59 has requirement numpy>=1.15, but you'll have numpy 1.14.6 which is incompatible.\u001b[0m\n",
            "\u001b[31mERROR: datascience 0.10.6 has requirement folium==0.2.1, but you'll have folium 0.8.3 which is incompatible.\u001b[0m\n",
            "\u001b[31mERROR: cvxpy 1.0.25 has requirement numpy>=1.15, but you'll have numpy 1.14.6 which is incompatible.\u001b[0m\n",
            "\u001b[31mERROR: blis 0.2.4 has requirement numpy>=1.15.0, but you'll have numpy 1.14.6 which is incompatible.\u001b[0m\n",
            "\u001b[31mERROR: albumentations 0.1.12 has requirement imgaug<0.2.7,>=0.2.5, but you'll have imgaug 0.2.9 which is incompatible.\u001b[0m\n",
            "Installing collected packages: numpy, gym, gym-2048\n",
            "  Found existing installation: numpy 1.17.4\n",
            "    Uninstalling numpy-1.17.4:\n",
            "      Successfully uninstalled numpy-1.17.4\n",
            "  Found existing installation: gym 0.15.4\n",
            "    Uninstalling gym-0.15.4:\n",
            "      Successfully uninstalled gym-0.15.4\n",
            "Successfully installed gym-0.10.11 gym-2048-0.2.6 numpy-1.14.6\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.colab-display-data+json": {
              "pip_warning": {
                "packages": [
                  "numpy"
                ]
              }
            }
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rvHLAeij1tl3",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "\n",
        "def maxAction(Q, state):\n",
        "    values = np.array([Q[state,a] for a in range(4)])\n",
        "    action = np.argmax(values)\n",
        "    return action\n",
        "\n",
        "def choseandcheck(Q, a, observation, EPSILON, env, s):\n",
        "    rand = np.random.random()\n",
        "    if rand < (1-EPSILON):\n",
        "        a = maxAction(Q,s)\n",
        "    else:\n",
        "        a = np.random.randint(0,4)\n",
        "   # print(env.step(a), a)\n",
        "    new_state, reward, done, _ = env.step(a)\n",
        "    observation_ = numpy_transformer_light(new_state)\n",
        "    #print(observation_, '\\n\\n', observation)\n",
        "    while observation==observation_:\n",
        "        #print(\"REACHED)\")\n",
        "        Q[s,a] -= 1\n",
        "        rand = np.random.random()\n",
        "        if rand < (1-EPSILON):\n",
        "            a = maxAction(Q,s)\n",
        "        else:\n",
        "            a = np.random.randint(0,4)\n",
        "            \n",
        "        new_state, reward, done, _ = env.step(a)\n",
        "        observation_ = numpy_transformer_light(new_state)\n",
        "        \n",
        "    return a, observation_, reward, done\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "def numpy_transformer(matrix):\n",
        "    lst = []\n",
        "    for i in range(len(matrix)):\n",
        "            for j in range(len(matrix[0])):\n",
        "                    lst.append(int(matrix[i][j]))\n",
        "    return tuple(lst)\n",
        "\n",
        "def numpy_transformer_light(matrix):\n",
        "    lst = []\n",
        "    for i in range(len(matrix)):\n",
        "            for j in range(len(matrix[0])):\n",
        "                    lst.append(int(matrix[i][j]))\n",
        "    return lst\n",
        "\n",
        "\n",
        "def get_max(state):\n",
        "    max_value = max(state)\n",
        "    return max_value\n",
        "\n",
        "\n",
        "def plotLearning(x, y, x_label, y_label,title):\n",
        "    plt.scatter(x,y, label = 'skitscat', color = 'k', s=25 , marker = 'o')\n",
        "    plt.xlabel(x_label)\n",
        "    plt.ylabel(y_label)\n",
        "    plt.title(title)\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jlqiqit_121k",
        "colab_type": "code",
        "outputId": "27721896-f076-434a-9668-4051a0c8c101",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "import gym \n",
        "import numpy as np\n",
        "import gym_2048\n",
        "import random\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    env = gym.make('2048-v0')\n",
        "\n",
        "    #model hyperparameters\n",
        "    ALPHA = 0.1\n",
        "    GAMMA = 0.99\n",
        "    EPSILON = 1.0\n",
        "    #this variable counts how many times we have won.\n",
        "    won = 0\n",
        "    #value we want to reach due to memory restrictions.\n",
        "    GOAL = 512\n",
        "    max_value = 0\n",
        "    num_won = []\n",
        "    max_values = []\n",
        "    avg_values = []\n",
        "    max_total = 0\n",
        "  \n",
        "\n",
        "    #construct state space\n",
        "    states = []\n",
        "    Q = {}\n",
        "\n",
        "    numGames = 5000    \n",
        "    BATCH_SIZE = int(numGames/100)\n",
        "    totalRewards = []\n",
        "    for i in range(numGames):\n",
        "        game_won = False\n",
        "        observation = numpy_transformer_light(env.reset())\n",
        "        s = tuple(observation)\n",
        "        #check if observation isn't already in states\n",
        "        if observation not in states:\n",
        "            states.append(observation)\n",
        "            for a in range(4):\n",
        "                #we changed the state to a to avoid a TypeError,\n",
        "                #because lists aren't hashable.S\n",
        "                Q[tuple(s),a] = 0\n",
        "        rand = np.random.random()\n",
        "\n",
        "        done = False\n",
        "        epRewards = 0\n",
        "        while not done:      \n",
        "            # choice and validity check to avoid dead ends (loops)\n",
        "            a, observation_, reward, done = choseandcheck(Q, a, observation, EPSILON, env, s)\n",
        "\n",
        "            s_ = tuple(observation_)\n",
        "            if observation_ not in states:\n",
        "                states.append(observation_)\n",
        "                for a in range(4):\n",
        "                    #we changed the state to a to avoid a TypeError,\n",
        "                    #because lists aren't hashable.\n",
        "                    Q[tuple(s_),a] = 0\n",
        "                    \n",
        "\n",
        "            rand = np.random.random()\n",
        "            if rand < (1-EPSILON):\n",
        "                a_ = maxAction(Q,s_)\n",
        "            else: \n",
        "                a_ = np.random.randint(0,4)\n",
        "            epRewards += reward\n",
        "            Q[s,a] = Q[s,a] + ALPHA*(reward + GAMMA*Q[s_,maxAction(Q,s_)] - Q[s,a])\n",
        "            \n",
        "            # no more needed. that does not check for validity of move. we incorporated thi in choseandcheck\n",
        "            # s,a = s_,a_\n",
        "\n",
        "            #checks if the GOAL is reached. Sets the done to True to avoid KeyError (a higher state can be reached\n",
        "            # but we don't want to reach it, because we don't have in in our state_space.)\n",
        "            if get_max(observation_)==GOAL:\n",
        "                game_won = True\n",
        "            \n",
        "            if get_max(observation_)>max_value:\n",
        "                max_value = get_max(observation_)\n",
        "                avg_values.append(max_value)\n",
        "            observation=observation_\n",
        "        \n",
        "        if game_won == True:\n",
        "            won+= 1\n",
        "\n",
        "        if EPSILON > 0.0002:\n",
        "            EPSILON -= 2/(numGames)  \n",
        "        else:\n",
        "            EPSILON = 0.0002\n",
        "        totalRewards.append(epRewards)\n",
        "\n",
        "        \n",
        "        max_total += get_max(observation)\n",
        "        \n",
        "        if (i+1)%(BATCH_SIZE) == 0:\n",
        "            new = won/(BATCH_SIZE)\n",
        "            num_won.append(new)\n",
        "            max_values.append(max_value)\n",
        "            average = max_total/BATCH_SIZE\n",
        "            avg_values.append(average)\n",
        "            won = 0\n",
        "            max_value = 0\n",
        "            max_total = 0\n",
        "            print(\"Episode: \" + str(i+1))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Episode: 50\n",
            "Episode: 100\n",
            "Episode: 150\n",
            "Episode: 200\n",
            "Episode: 250\n",
            "Episode: 300\n",
            "Episode: 350\n",
            "Episode: 400\n",
            "Episode: 450\n",
            "Episode: 500\n",
            "Episode: 550\n",
            "Episode: 600\n",
            "Episode: 650\n",
            "Episode: 700\n",
            "Episode: 750\n",
            "Episode: 800\n",
            "Episode: 850\n",
            "Episode: 900\n",
            "Episode: 950\n",
            "Episode: 1000\n",
            "Episode: 1050\n",
            "Episode: 1100\n",
            "Episode: 1150\n",
            "Episode: 1200\n",
            "Episode: 1250\n",
            "Episode: 1300\n",
            "Episode: 1350\n",
            "Episode: 1400\n",
            "Episode: 1450\n",
            "Episode: 1500\n",
            "Episode: 1550\n",
            "Episode: 1600\n",
            "Episode: 1650\n",
            "Episode: 1700\n",
            "Episode: 1750\n",
            "Episode: 1800\n",
            "Episode: 1850\n",
            "Episode: 1900\n",
            "Episode: 1950\n",
            "Episode: 2000\n",
            "Episode: 2050\n",
            "Episode: 2100\n",
            "Episode: 2150\n",
            "Episode: 2200\n",
            "Episode: 2250\n",
            "Episode: 2300\n",
            "Episode: 2350\n",
            "Episode: 2400\n",
            "Episode: 2450\n",
            "Episode: 2500\n",
            "Episode: 2550\n",
            "Episode: 2600\n",
            "Episode: 2650\n",
            "Episode: 2700\n",
            "Episode: 2750\n",
            "Episode: 2800\n",
            "Episode: 2850\n",
            "Episode: 2900\n",
            "Episode: 2950\n",
            "Episode: 3000\n",
            "Episode: 3050\n",
            "Episode: 3100\n",
            "Episode: 3150\n",
            "Episode: 3200\n",
            "Episode: 3250\n",
            "Episode: 3300\n",
            "Episode: 3350\n",
            "Episode: 3400\n",
            "Episode: 3450\n",
            "Episode: 3500\n",
            "Episode: 3550\n",
            "Episode: 3600\n",
            "Episode: 3650\n",
            "Episode: 3700\n",
            "Episode: 3750\n",
            "Episode: 3800\n",
            "Episode: 3850\n",
            "Episode: 3900\n",
            "Episode: 3950\n",
            "Episode: 4000\n",
            "Episode: 4050\n",
            "Episode: 4100\n",
            "Episode: 4150\n",
            "Episode: 4200\n",
            "Episode: 4250\n",
            "Episode: 4300\n",
            "Episode: 4350\n",
            "Episode: 4400\n",
            "Episode: 4450\n",
            "Episode: 4500\n",
            "Episode: 4550\n",
            "Episode: 4600\n",
            "Episode: 4650\n",
            "Episode: 4700\n",
            "Episode: 4750\n",
            "Episode: 4800\n",
            "Episode: 4850\n",
            "Episode: 4900\n",
            "Episode: 4950\n",
            "Episode: 5000\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DwQSM-kw4tY_",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "x = [j for j in range(1,101)]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "viAGKkyOnxOd",
        "colab_type": "code",
        "outputId": "34648922-5d7d-4aa2-905b-f3ea72abee1c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 129
        }
      },
      "source": [
        "print(avg_values, '\\n\\n' ,len(avg_values), '\\n\\n')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[4, 8, 16, 32, 64, 128, 256, 86.4, 4, 8, 16, 32, 64, 128, 256, 92.48, 2, 4, 8, 16, 32, 64, 128, 256, 98.56, 4, 8, 16, 32, 64, 128, 256, 89.92, 2, 4, 8, 16, 32, 64, 128, 256, 97.92, 2, 4, 8, 16, 32, 64, 128, 256, 85.76, 4, 8, 16, 32, 64, 128, 256, 90.24, 4, 8, 16, 32, 64, 128, 256, 97.92, 2, 4, 8, 16, 32, 64, 128, 256, 100.48, 4, 8, 16, 32, 64, 128, 256, 96.64, 2, 4, 8, 16, 32, 64, 128, 85.44, 2, 4, 8, 16, 32, 64, 128, 256, 99.84, 2, 4, 8, 16, 32, 64, 128, 256, 102.4, 4, 8, 16, 32, 64, 128, 256, 113.28, 2, 4, 8, 16, 32, 64, 128, 256, 94.72, 4, 8, 16, 32, 64, 128, 256, 85.44, 2, 4, 8, 16, 32, 64, 128, 92.16, 4, 8, 16, 32, 64, 128, 256, 87.04, 2, 4, 8, 16, 32, 64, 128, 256, 92.48, 2, 4, 8, 16, 32, 64, 128, 81.6, 2, 4, 8, 16, 32, 64, 128, 256, 90.24, 2, 4, 8, 16, 32, 64, 128, 256, 83.2, 2, 4, 8, 16, 32, 64, 128, 256, 79.04, 4, 8, 16, 32, 64, 128, 83.2, 2, 4, 8, 16, 32, 64, 128, 256, 89.92, 4, 8, 16, 32, 64, 128, 256, 86.72, 2, 4, 8, 16, 32, 64, 128, 256, 82.24, 4, 8, 16, 32, 64, 128, 256, 78.4, 2, 4, 8, 16, 32, 64, 128, 256, 97.6, 4, 8, 16, 32, 64, 128, 256, 87.04, 2, 4, 8, 16, 32, 64, 128, 256, 90.56, 2, 4, 8, 16, 32, 64, 128, 81.6, 4, 8, 16, 32, 64, 128, 256, 85.12, 2, 4, 8, 16, 32, 64, 128, 256, 85.76, 4, 8, 16, 32, 64, 128, 256, 88.32, 2, 4, 8, 16, 32, 64, 128, 256, 72.64, 4, 8, 16, 32, 64, 128, 256, 92.48, 2, 4, 8, 16, 32, 64, 128, 256, 86.08, 4, 8, 16, 32, 64, 128, 256, 84.16, 4, 8, 16, 32, 64, 128, 256, 79.04, 2, 4, 8, 16, 32, 64, 128, 256, 77.44, 2, 4, 8, 16, 32, 64, 128, 256, 85.12, 2, 4, 8, 16, 32, 64, 128, 256, 79.68, 2, 4, 8, 16, 32, 64, 128, 256, 84.48, 2, 4, 8, 16, 32, 64, 128, 256, 82.88, 4, 8, 16, 32, 64, 128, 256, 82.88, 2, 4, 8, 16, 32, 64, 128, 256, 74.24, 4, 8, 16, 32, 64, 128, 256, 76.64, 2, 4, 8, 16, 32, 64, 128, 256, 79.36, 2, 4, 8, 16, 32, 64, 128, 256, 88.0, 4, 8, 16, 32, 64, 128, 256, 94.72, 2, 4, 8, 16, 32, 64, 128, 256, 95.04, 4, 8, 16, 32, 64, 128, 256, 93.76, 2, 4, 8, 16, 32, 64, 128, 256, 89.6, 4, 8, 16, 32, 64, 128, 256, 87.68, 4, 8, 16, 32, 64, 128, 256, 93.44, 4, 8, 16, 32, 64, 128, 256, 96.0, 4, 8, 16, 32, 64, 128, 256, 102.72, 2, 4, 8, 16, 32, 64, 128, 256, 77.76, 2, 4, 8, 16, 32, 64, 128, 256, 94.08, 4, 8, 16, 32, 64, 128, 256, 90.56, 2, 4, 8, 16, 32, 64, 128, 256, 97.92, 4, 8, 16, 32, 64, 128, 256, 93.76, 2, 4, 8, 16, 32, 64, 128, 256, 82.24, 2, 4, 8, 16, 32, 64, 128, 81.28, 4, 8, 16, 32, 64, 128, 256, 82.24, 2, 4, 8, 16, 32, 64, 128, 256, 99.52, 2, 4, 8, 16, 32, 64, 128, 256, 77.44, 2, 4, 8, 16, 32, 64, 128, 256, 96.0, 4, 8, 16, 32, 64, 128, 256, 84.8, 2, 4, 8, 16, 32, 64, 128, 256, 100.48, 2, 4, 8, 16, 32, 64, 128, 256, 91.84, 2, 4, 8, 16, 32, 64, 128, 256, 96.0, 4, 8, 16, 32, 64, 128, 256, 92.48, 2, 4, 8, 16, 32, 64, 128, 256, 101.12, 2, 4, 8, 16, 32, 64, 128, 256, 93.12, 2, 4, 8, 16, 32, 64, 128, 256, 87.36, 4, 8, 16, 32, 64, 128, 256, 82.88, 2, 4, 8, 16, 32, 64, 128, 256, 92.8, 2, 4, 8, 16, 32, 64, 128, 256, 82.24, 2, 4, 8, 16, 32, 64, 128, 256, 98.56, 4, 8, 16, 32, 64, 128, 256, 80.64, 2, 4, 8, 16, 32, 64, 128, 256, 90.24, 2, 4, 8, 16, 32, 64, 128, 256, 84.8, 2, 4, 8, 16, 32, 64, 128, 256, 84.8, 4, 8, 16, 32, 64, 128, 256, 90.56, 2, 4, 8, 16, 32, 64, 128, 256, 102.72, 2, 4, 8, 16, 32, 64, 128, 256, 93.44, 4, 8, 16, 32, 64, 128, 256, 86.72, 2, 4, 8, 16, 32, 64, 128, 256, 90.24, 2, 4, 8, 16, 32, 64, 128, 256, 90.56, 4, 8, 16, 32, 64, 128, 256, 94.72, 4, 8, 16, 32, 64, 128, 256, 81.6, 2, 4, 8, 16, 32, 64, 128, 256, 96.32, 2, 4, 8, 16, 32, 64, 128, 256, 91.52, 2, 4, 8, 16, 32, 64, 128, 256, 80.96, 4, 8, 16, 32, 64, 128, 256, 90.24, 2, 4, 8, 16, 32, 64, 128, 256, 79.04, 4, 8, 16, 32, 64, 128, 256, 84.16, 2, 4, 8, 16, 32, 64, 128, 256, 89.28] \n",
            "\n",
            " 855 \n",
            "\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qRUq6KLdSVy5",
        "colab_type": "code",
        "outputId": "a8432afa-e2ad-4362-8ce2-6c7e73fd078b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy import stats\n",
        "\n",
        "plotLearning(x,num_won,'Batch','Won games in percentage', 'Win-Statistic')\n",
        "# get coeffs of linear fit\n",
        "slope, intercept, r_value, p_value, std_err = stats.linregress(x,num_won)\n",
        "\n",
        "# use line_kws to set line label for legend\n",
        "ax = sns.regplot(x=x, y=num_won, color='b', \n",
        " line_kws={'label':\"y={0:.7f}x+{1:.7f}\".format(slope,intercept)})\n",
        "\n",
        "# plot legend\n",
        "ax.legend()\n",
        "\n",
        "plt.show()\n",
        "\n",
        "plotLearning(x,max_values,'Batch','Max_values', 'Max-Statistic')\n",
        "# get coeffs of linear fit\n",
        "slope, intercept, r_value, p_value, std_err = stats.linregress(x,max_values)\n",
        "\n",
        "# use line_kws to set line label for legend\n",
        "ax = sns.regplot(x=x, y=max_values, color='b', \n",
        " line_kws={'label':\"y={0:.7f}x+{1:.7f}\".format(slope,intercept)})\n",
        "\n",
        "# plot legend\n",
        "ax.legend()\n",
        "\n",
        "plt.show()\n",
        "\n",
        "\n",
        "plotLearning(x,avg_values,'Batch','Avg_values', 'Average-Max-Statistic')\n",
        "# get coeffs of linear fit\n",
        "slope, intercept, r_value, p_value, std_err = stats.linregress(x,avg_values)\n",
        "\n",
        "# use line_kws to set line label for legend\n",
        "ax = sns.regplot(x=x, y=avg_values, color='b', \n",
        " line_kws={'label':\"y={0:.7f}x+{1:.7f}\".format(slope,intercept)})\n",
        "\n",
        "# plot legend\n",
        "ax.legend()\n",
        "\n",
        "plt.show()\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nhg0blvRyqdyVtNvMdoVDkZmVm9muupcUadmKioro06ePgoK0OWZGnz59Ur4aTqUqKXoHUviehenA\npJS2JtJCKShIW1Wfv+16dWnhgT8CJ9VneRFpHOvWrWPixIkccsghnHXWWZSUlFSb54UXXmDChAnk\n5uYyYcIEli5dGp22YsUKcnNzOeSQQ5gzZw6RlynedNNNDBo0iLy8PPLy8li8OOgpv7S0lFmzZpGb\nm8vIkSO59dZb47ZVXl7OYYcdximnnFItH3PmzCE7Oztu3BNPPMGoUaMYPXo055xzToN+i3379jFt\n2jQOPfRQRo8ezTXXXBOd9pvf/Ibc3Fzy8vI4+uijeffddwF4+OGHo/uYl5dHhw4dePPNN6ut+623\n3uLII48kNzeXU089lV27gsqS2n7biNNOO40xY8ZEv7/55ptMmjSJvLw88vPzef31+HeRLV++nMzM\nTJ566qnouKuvvprRo0czcuTIuON07LHH8qUvfSma/82bNzfgF4zh7kkNwOkxwwzgp8CyZJdP1zBh\nwgQXaYh33323ubNQb2eeeaY/+uij7u7+n//5n/4///M/1eZZuXKlb9iwwd3dV61a5QMHDoxOO/zw\nw33ZsmVeUVHhU6ZM8cWLF7u7+4033ui33357tXU9/PDDftZZZ7m7+969e/2LX/yir1u3Ljr9F7/4\nhc+cOdOnTZsWt9zy5cv93HPP9W7dukXHvffee56Xl+fbt293d/dNmzYlvd833nij/+53v4sbt3fv\nXl+6dKm7uxcXF/vRRx8d3Z+dO3dG53v22Wf9pJNOqrbOt99+2w866KCE28vPz/eXXnrJ3d3vv/9+\nv+GGG9y99t/W3X3BggU+c+ZMHz16dHTciSeeGM3XokWL/JhjjolOKysr8+OOO86nTp3qTz75pLu7\n//Of//Qvf/nLXlZW5mVlZT5p0iR/8cUX3d39mGOO8eXLl9f8Q4US/Y0DBV5DuZrKFcOpMcNJwG6C\n6iSRNqGsDD76KD1DWVnt2/7hD3/InXfeGf1+/fXXc9ddd9W6jLuzdOlSZsyYAcCsWbP44x//WG2+\nww47jIEDBwIwevRo9u/fT3FxMRs3bmTXrl1MmjQJM+P8889PuHwsM2Pv3r2UlZWxf/9+OnXqRI8e\nPYCgEX/RokVccsklccuUl5dz1VVXcdttt8WNv++++7jsssvo1asXAP379wfgmWeeYfLkybg7Gzdu\nZMSIEXz22We15guga9euHHfccQB06tSJ8ePHU1hYCBDNI8DevXsTVq88+uijnH322QnX/d577/HV\nr34VgBNPPJEFCxYANf+2AHv27OGOO+7ghhtuiFuXmUWvOHbu3BldHuBXv/oVZ5xxRvS3iMxfVFRE\nSUkJxcXFlJaWcuCBB9b5ezREKm0MF6YzIyLNrbAQUrhxIyXr1sHQoTVPv+iiizj99NO54oorqKio\n4LHHHmPp0qXk5eUlnP+RRx6hf//+9OzZk8zM4N84JyeHDRs21JqPBQsWMH78eDp37syGDRvIycmJ\nTqu6/K9//Wvmz59Pfn4+v/jFL+jVqxczZszg2WefZcCAAezbt4958+bRu3dvAK644gpuu+02du/e\nHbfNX//615x22mkMGDAgbvx7770HwFFHHUV5eTk33XQTU6ZM4etf/zoLFizg7rvv5k9/+hM333wz\nX/jCF2rdr6p27NjBc889x3e+853ouLvvvps77riDkpKShFU+jz/+OM8++2zC9Y0ePZpnn32Wr33t\nazz55JOsX7++2jyxvy3AD37wA6688kq6du0aN9+dd97JSSedxPe//30qKir417/+BcCGDRt45pln\nePHFF1m+fHl0/iOPPJLjjjuOAQMG4O5cfvnljBw5Mjr9wgsvJCMjgzPOOIMbbrihcdrLarqUiAzA\nrwje0ZxwqGv5dA+qSpKGilxmr1vnDukZYmpbanTCCSf4ypUrfcmSJX7GGWfUOf+WLVv84IMPjn7/\n5JNP4qosqlq9erUfdNBBvnbtWncPqncmT54cnf7yyy9Hq4A+++wzLysr8/Lycr/uuuv8wgsvdHf3\nf/zjH37OOed4SUmJb9q0yUeMGOEffPCBP/fcc37ppZe6u/uLL74YXc+GDRv8qKOO8tLSUnf3uKqk\nadOm+de+9jUvKSnxDz/80HNycvzzzz93d/ft27f7wIED/fTTT4/O//bbb/u4ceN83LhxfuCBB/rg\nwYOj37du3Rqdr7S01KdMmeLz5s1L+Ds8/PDDfv7558eNe/XVV33MmDE1/nZr1qzxE0880cePH+83\n3XST9+7du9bf9o033vBTTz3V3d3XrVsXd1y+/e1v+1NPPeXu7o8//nj0GMyYMcOXLVvm7u6zZs2K\nViW9//77fvLJJ/vu3bt99+7dPmnSJH/55Zfd3b2wsNDd3Xft2uUnnniiP/TQQwnzn2pVUjJXDAX1\n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\noiJkb11EAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-10-53e42ea8f48c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 32\u001b[0;31m \u001b[0mplotLearning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mavg_values\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'Batch'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'Avg_values'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Average-Max-Statistic'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     33\u001b[0m \u001b[0;31m# get coeffs of linear fit\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m \u001b[0mslope\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mintercept\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mr_value\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mp_value\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstd_err\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstats\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinregress\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mavg_values\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-5-7ddbdd06e338>\u001b[0m in \u001b[0;36mplotLearning\u001b[0;34m(x, y, x_label, y_label, title)\u001b[0m\n\u001b[1;32m     57\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     58\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mplotLearning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_label\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_label\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 59\u001b[0;31m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'skitscat'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'k'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m25\u001b[0m \u001b[0;34m,\u001b[0m \u001b[0mmarker\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'o'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     60\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_label\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     61\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_label\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mscatter\u001b[0;34m(x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, verts, edgecolors, plotnonfinite, data, **kwargs)\u001b[0m\n\u001b[1;32m   2839\u001b[0m         \u001b[0mverts\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mverts\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0medgecolors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0medgecolors\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2840\u001b[0m         plotnonfinite=plotnonfinite, **({\"data\": data} if data is not\n\u001b[0;32m-> 2841\u001b[0;31m         None else {}), **kwargs)\n\u001b[0m\u001b[1;32m   2842\u001b[0m     \u001b[0msci\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m__ret\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2843\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0m__ret\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/__init__.py\u001b[0m in \u001b[0;36minner\u001b[0;34m(ax, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1597\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0minner\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1598\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1599\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msanitize_sequence\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1600\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1601\u001b[0m         \u001b[0mbound\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnew_sig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36mscatter\u001b[0;34m(self, x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, verts, edgecolors, plotnonfinite, **kwargs)\u001b[0m\n\u001b[1;32m   4441\u001b[0m         \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mravel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4442\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4443\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"x and y must be the same size\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4444\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4445\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0ms\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: x and y must be the same size"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ljAC-8VdDrY1",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "round = 2\n",
        "if __name__ == '__main__':\n",
        "    env = gym.make('2048-v0')\n",
        "\n",
        "    #model hyperparameters (commetn what doesn need to be rewritten)\n",
        "    #ALPHA = 0.1\n",
        "    GAMMA = 0.99\n",
        "    #As already some knowledge, less randomness. still decreasing. reduce start with each repetition\n",
        "    EPSILON = 1/round\n",
        "    #this variable counts how many times we have won.\n",
        "    won = 0\n",
        "    #value we want to reach due to memory restrictions.\n",
        "    #GOAL = 512\n",
        "    max_value = 0\n",
        "    #num_won = []\n",
        "    #max_values = []\n",
        "    #avg_values = []\n",
        "    max_total = 0\n",
        "\n",
        "    #construct state space\n",
        " \n",
        "    #states = []\n",
        "    #Q = {}\n",
        "\n",
        "    numGames = 100\n",
        "    BATCH_SIZE = int(numGames/100)\n",
        "    \n",
        "    for i in range(numGames):\n",
        "        game_won = False\n",
        "        observation = numpy_transformer_light(env.reset())\n",
        "        s = tuple(observation)\n",
        "        #check if observation isn't already in states\n",
        "        if observation not in states:\n",
        "            states.append(observation)\n",
        "            for a in range(4):\n",
        "                #we changed the state to a to avoid a TypeError,\n",
        "                #because lists aren't hashable.S\n",
        "                Q[tuple(s),a] = 0\n",
        "        rand = np.random.random()\n",
        "\n",
        "        done = False\n",
        "        epRewards = 0\n",
        "        while not done:      \n",
        "            # choice and validity check to avoid dead ends (loops)\n",
        "            a, observation_, reward, done = choseandcheck(Q, a, observation, EPSILON, env, s)\n",
        "\n",
        "            s_ = tuple(observation_)\n",
        "            if observation_ not in states:\n",
        "                states.append(observation_)\n",
        "                for a in range(4):\n",
        "                    #we changed the state to a to avoid a TypeError,\n",
        "                    #because lists aren't hashable.\n",
        "                    Q[tuple(s_),a] = 0\n",
        "                    \n",
        "\n",
        "            rand = np.random.random()\n",
        "            if rand < (1-EPSILON):\n",
        "                a_ = maxAction(Q,s_)\n",
        "            else: \n",
        "                a_ = np.random.randint(0,4)\n",
        "            epRewards += reward\n",
        "            Q[s,a] = Q[s,a] + ALPHA*(reward + GAMMA*Q[s_,maxAction(Q,s_)] - Q[s,a])\n",
        "            \n",
        "            # no more needed. that does not check for validity of move. we incorporated thi in choseandcheck\n",
        "            # s,a = s_,a_\n",
        "\n",
        "            #checks if the GOAL is reached. Sets the done to True to avoid KeyError (a higher state can be reached\n",
        "            # but we don't want to reach it, because we don't have in in our state_space.)\n",
        "            if get_max(observation_)==GOAL:\n",
        "                game_won = True\n",
        "            \n",
        "            if get_max(observation_)>max_value:\n",
        "                max_value = get_max(observation_)\n",
        "                \n",
        "            observation=observation_\n",
        "        \n",
        "        \n",
        "        if game_won == True:\n",
        "            won+= 1\n",
        "\n",
        "        if EPSILON > 0.0002:\n",
        "            EPSILON -= 2/(numGames)  \n",
        "        else:\n",
        "            EPSILON = 0.0002\n",
        "        totalRewards.append(epRewards)\n",
        "        max_total += get_max(observation)\n",
        "        \n",
        "        if (i+1)%(BATCH_SIZE) == 0:\n",
        "            new = won/(BATCH_SIZE)\n",
        "            num_won.append(new)\n",
        "            max_values.append(max_value)\n",
        "            average = max_total/BATCH_SIZE\n",
        "            avg_values.append(average)\n",
        "            won = 0\n",
        "            max_value = 0\n",
        "            max_total = 0\n",
        "            print(\"Episode: \" + str(i+1))\n",
        "            "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VPwjYVwHJL3r",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "x = [j for j in range(1,101)]\n",
        "lower_bound= (round-1)*100"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KfbS-G_dKkd_",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "plotLearning(x,num_won[lower_bound:],'Batch','Won games in percentage', 'Win-Statistic')\n",
        "# get coeffs of linear fit\n",
        "slope, intercept, r_value, p_value, std_err = stats.linregress(x,num_won[lower_bound:])\n",
        "\n",
        "# use line_kws to set line label for legend\n",
        "ax = sns.regplot(x=x, y=num_won[lower_bound:], color='b', \n",
        " line_kws={'label':\"y={0:.7f}x+{1:.7f}\".format(slope,intercept)})\n",
        "\n",
        "# plot legend\n",
        "ax.legend()\n",
        "\n",
        "plt.show()\n",
        "\n",
        "plotLearning(x,max_values[lower_bound:],'Batch','Max_values', 'Max-Statistic')\n",
        "# get coeffs of linear fit\n",
        "slope, intercept, r_value, p_value, std_err = stats.linregress(x,max_values[lower_bound:])\n",
        "\n",
        "# use line_kws to set line label for legend\n",
        "ax = sns.regplot(x=x, y=max_values[lower_bound:], color='b', \n",
        " line_kws={'label':\"y={0:.7f}x+{1:.7f}\".format(slope,intercept)})\n",
        "\n",
        "# plot legend\n",
        "ax.legend()\n",
        "\n",
        "plt.show()\n",
        "\n",
        "\n",
        "plotLearning(x,avg_values[lower_bound:],'Batch','Avg_values', 'Average-Max-Statistic')\n",
        "# get coeffs of linear fit\n",
        "slope, intercept, r_value, p_value, std_err = stats.linregress(x,avg_values[lower_bound:])\n",
        "\n",
        "# use line_kws to set line label for legend\n",
        "ax = sns.regplot(x=x, y=avg_values[lower_bound:], color='b', \n",
        " line_kws={'label':\"y={0:.7f}x+{1:.7f}\".format(slope,intercept)})\n",
        "\n",
        "# plot legend\n",
        "ax.legend()\n",
        "\n",
        "plt.show()\n"
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}